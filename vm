#!/usr/bin/env python
# -*- coding:utf8 -*-
__author__ = 'xiaozhang'





import commands
import uuid
import sys
import random
import re
import os


KVM_TPL='''


<!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh edit cobbler
or other application using the libvirt API.
-->

<domain type='kvm'>
  <name>{uuid}</name>
  <uuid>{uuid}</uuid>
  <description>None</description>
  <memory unit='KiB'>{mem}</memory>
  <currentMemory unit='KiB'>{mem}</currentMemory>
  <vcpu placement='static'>{cpu}</vcpu>
  <os>
    <type arch='x86_64' machine='rhel6.6.0'>hvm</type>
    <boot dev='hd'/>
    <boot dev='cdrom'/>
    <bootmenu enable='yes'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <cpu mode='host-model'>
    <model fallback='allow'/>
  </cpu>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/libexec/qemu-kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='{system_image}'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='{disk_path}'/>
      <target dev='vdb' bus='virtio'/>
    </disk>
    <interface type='bridge'>
      <mac address='{mac}'/>
      <source bridge='{bridge}'/>
      <model type='virtio'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
  </devices>
</domain>


'''

class VM(object):
    def __init__(self):
        # image_path
        self.image_path='/data/kvm/img/sys/'
        self.dataimage_path='/data/kvm/img/data/'



        self.argv= self.getopt(sys.argv)
        if 'a' not in self.argv.keys():
            print("-a(arguments) require, example: -a 'mem=8G cpu=4 disk=50G bridge=br0 image=centos6' ")
            return
        if not self.check():
           return
        print('init start....')
        self.init()
        print('gen start....')
  
        self.uuid=str(uuid.uuid4())
        self.tpl=self.get_tpl()
        self.mac=self.get_mac()
        self.vmargs=self.gen_vmargs()
        self.get_image()
        self.gen_disk()
        self.gen_xml()
        self.define()
        self.start()

    def init(self):
        os.system("mkdir -p '%s'"%(self.image_path))
        os.system("mkdir -p '%s'"%(self.dataimage_path))

    def define(self):
        print(self.shell('virsh define /tmp/%s.xml'%(self.uuid)))

    def start(self):
        print(self.shell('virsh start %s'%(self.uuid)))

    def check(self):
        for i in ['virsh','virt-make-fs','wget']:
            if os.system('which %s > /dev/null 2>&1'%(i))!=0:
                print('%s not install' %(i))
	        return False
        return True

    def shell(self,cmd):
        return commands.getoutput(cmd)

    def get_image_list(self):

        return [{'name':'centos6','url':'/data/kvm/img/centos6.4-dev-root.qcow2'}]

    def get_image(self):
        images=self.get_image_list()
        flag=False
        for image in images:
           if image['name']==self.vmargs['image']:
               if image['url'].startswith('/'):
                   cmd="cp '%s' '%s'"%(image['url'],self.image_path+os.path.sep+self.uuid+'.qcow2')
                   print(cmd)
                   os.system(cmd)
               elif image['url'].startswith('http'):
                   cmd="wget '%s' -O '%s'"%(image['url'],self.image_path+os.path.sep+self.uuid+'.qcow2')
                   print(cmd)
                   os.system(cmd)
               flag=True
               break
    def get_mac(self):
        return self.shell(r"MACADDR=\"52:54:$(dd if=/dev/urandom count=1 2>/dev/null | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')\"; echo $MACADDR").replace('"','')

    def get_tpl(self):
        #return self.shell('cli download -f vm.xml -d templates -o /tmp/vm.xml && cat /tmp/vm.xml')
        return KVM_TPL

    def gen_disk(self):
        #self.shell('qemu-img create -f qcow2 %s/%s.qcow2 %sk'%(self.dataimage_path, self.uuid,self.vmargs['disk']))  
        self.shell('mkdir -p /tmp/%s'% (self.uuid))
        print("gen disk file : %s" % (self.dataimage_path+os.path.sep+self.uuid+'.qcow2'))
        cmd="virt-make-fs -F qcow2 -t ext4 -s %sK /tmp/%s/  %s "%(str(self.vmargs['disk']),self.uuid,self.dataimage_path+os.path.sep+self.uuid+'.qcow2')
        print(cmd)
        print(self.shell(cmd))
    def gen_vmargs(self):
        vmargs={'mem':'8G','disk':'50G','cpu':'8','ip':'','bridge':'br0','uuid':self.uuid,'mac':self.mac,'system_image':self.image_path+os.path.sep+self.uuid+'.qcow2','disk_path':self.dataimage_path+os.path.sep+self.uuid+'.qcow2'}
        unit={'G':1024*1024,'M':1024,'g':1024*1024,'m':1024}
        exp=re.compile(r'(\d+)(m|g)',re.IGNORECASE)
        args=self.argv['a']
        largs=args.split(' ')
        for a in largs:
            kv=a.split('=')
            kv[0]=kv[0].strip()
            kv[1]=kv[1].strip()
            if kv[0] in ['mem','disk']:
                m=exp.match(kv[1])
                if m!=None:
                    vmargs[kv[0]]=str(int( m.group(1)) * unit[m.group(2)])
            else:    
                vmargs[kv[0]]=kv[1]
        return vmargs
        
    def gen_xml(self):
        vmargs=self.vmargs
        tpl=self.tpl
        for k,v in vmargs.items():
            tpl= tpl.replace('{'+k +'}',v)
        with open('/tmp/%s.xml'% self.uuid,'w') as xml:
            #pass
            xml.write(tpl)

        
   
    def getopt(self,inputs):
     def ptype(input):
         if input == "":
             return (0,"")
         if "-" == input[0] and len(input) == 2:
             return (1,input[1])
         if "--" == input[:2] and len(input) >= 4:
             return (2,input[2:])
         return (0,"")
     def istype(input):
         if len(input) <= 0:
             return 0
         if "-" == input[0]:
             return 1
         return 0
     ret = {}
     ret['__ctrl__']=''
     ret['__func__']=''
     u = 0
     ucount = len(inputs)
     icount = 0
     ls = []
     if ucount >= 1:
         while 1:
             if u >= ucount:
                 break
             if istype(inputs[u]) == 1:
                 break

             ls.append(inputs[u])
             u += 1

         inputs = inputs[u:]
         icount = len(inputs)

     if icount >= 1:
         i = 0
         state = 0
         while 1:
             t,name = ptype(inputs[i])
             for c in range(1):
                 if t == 0 :
                     i += 1
                     break
                 if i+1 < icount:
                     tt,tname = ptype(inputs[i+1])
                     if tt != 0:
                         ret[name] = ""
                         i += 1
                         break
                     ret[name] = inputs[i+1]
                     i += 2
                     break
                 ret[name] = ""
                 i += 1
                 break
             if i >= icount:
                 break
     if len(ls)==2:
         ret['__ctrl__']=ls[0]
         ret['__func__']=ls[1]
     elif len(ls)==1:
         ret['__ctrl__']=''
         ret['__func__']=ls[0]
     return (ret) 



vm=VM()


